# 工作流名称
name: Build And Release

# 触发工作流程的事件
on:
  push:
    tags: [ b* ]
  pull_request:
    branches: [ master ]

jobs:
  AndroidBuild:
    runs-on: ubuntu-latest
    env:
      # 应用的application_id
      APP_ID: com.taro.demo
      # 应用名称
      APP_NAME: Taro Demo
      # 应用icon
      APP_ICON: ic_launcher
      # 应用圆角icon
      APP_ROUND_ICON: ic_launcher_round
      # 应用支持的CPU架构
      APP_ABI_FILTERS: armeabi-v7a, arm64-v8a
      # 打包类型
      BUILD_TYPE: debug
      # 版本名称
      VERSION_NAME: 1.0.0
      # 版本号
      VERSION_CODE: 10
      # 密钥库文件
      KEYSTORE_FILE: debug.keystore
      # 密钥库口令
      KEYSTORE_PASSWORD: android
      # 密钥库别名
      KEYSTORE_KEY_ALIAS: androiddebugkey
      # 密钥库别名口令
      KEYSTORE_KEY_PASSWORD: android
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2

      - name: Cache node_modules Folder
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-node_modules
          restore-keys: ${{ runner.os }}-node_modules

      - name: Get Yarn Cache Directory Path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn
        uses: actions/cache@v2
        env:
          cache-name: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: |
          yarn

      - name: Build Taro React Native Bundle
        run: |
          yarn build:rn --platform android

      # 构建 Android APP
      # - name: Build Android debug APP
      # - name: Upload Android debug APP

      # - name: Build Android release APP
      # - name: Upload Android release APP

      - name: Copy Artifacts
        run: |
          mkdir artifact
          cp ${{ github.workspace }}/android/app/src/main/assets/index.android.bundle ${{ github.workspace }}/artifact
          cp ${{ github.workspace }}/android/build.gradle ${{ github.workspace }}/artifact

      - name: Upload Android All Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ${{ github.workspace }}/artifact


  iOSBuild:
    runs-on: macos-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2

      - name: Cache node_modules Folder
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-node_modules
          restore-keys: ${{ runner.os }}-node_modules

      - name: Get Yarn Cache Directory Path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn
        uses: actions/cache@v2
        env:
          cache-name: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: |
          yarn
      - name: Build Taro React Native Bundle
        run: |
          yarn build:rn --platform ios

      # 构建 iOS APP
      # - name: Build iOS debug APP
      # - name: Upload iOS debug APP

      # - name: Build iOS release APP
      # - name: Upload iOS release APP

      - name: Copy Artifacts
        run: |
          mkdir artifact
          cp ${{ github.workspace }}/ios/main.jsbundle ${{ github.workspace }}/artifact
          cp ${{ github.workspace }}/ios/Podfile ${{ github.workspace }}/artifact

      - name: Upload iOS All Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ${{ github.workspace }}/artifact


  Publish:
    needs: [AndroidBuild, iOSBuild]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # - name: Display structure of downloaded files
      #   run: ls

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: |
          find . -maxdepth 2

      - name: Config git
        run: git config --global user.email "name@gmail.com" && git config --global user.name "name"

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - name: Genarate QrCode
        uses: iChengbo/generate-qrcode@v0.3.0
        id: AndroidBundleQrCode
        with:
          text: https://cdn.jsdelivr.net/gh/iChengbo/taro-build-demo@${{ steps.vars.outputs.tag }}/artifact/index.android.bundle

      - name: Genarate QrCode
        uses: iChengbo/generate-qrcode@v0.3.0
        id: iOSBundleQrCode
        with:
          text: https://cdn.jsdelivr.net/gh/iChengbo/taro-build-demo@${{ steps.vars.outputs.tag }}/artifact/main.jsbundle

      - name: Reset Tag
        run: |
          echo ${{ steps.vars.outputs.tag }}
          git tag -d ${{ steps.vars.outputs.tag }}
          git push origin :refs/tags/${{ steps.vars.outputs.tag }}
          git add .
          git commit -m "update by github actions"
          git tag ${{ steps.vars.outputs.tag }}
          git push origin ${{ steps.vars.outputs.tag }}

      - name: Upload release assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifact"
          body: |
            |  AndroidBundle  |  iOSBundle  |
            | :--: | :--: |
            | ![AndroidBundle](https://cdn.jsdelivr.net/gh/iChengbo/taro-build-demo@${{ steps.vars.outputs.tag }}/${{ steps.AndroidBundleQrCode.outputs.QR_CODE_PNG_NAME }}) | ![iOSBundle](https://cdn.jsdelivr.net/gh/iChengbo/taro-build-demo@${{ steps.vars.outputs.tag }}/${{ steps.iOSBundleQrCode.outputs.QR_CODE_PNG_NAME }}) |
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.vars.outputs.tag }}

